<script nonce="${scriptNonce}">
    var username = "${user.username}";
    <c:if test="${collaborationEnabled eq true}">
    username = 'Collaboration Session';
    </c:if>
    const agent = '${userAgent}';

    structurizr.autoSave = false;
    var structurizrEncryptionStrategy;
    const structurizrApiClient = new structurizr.io.StructurizrApiClient(
        "${structurizrConfiguration.apiUrl}",
        "${workspace.id}",
        "${workspace.apiKey}",
        "${workspace.apiSecret}",
        username,
        agent
    );

    structurizrApiClient.getWorkspace(
        "${workspace.internalVersion}",
        function(response) {
            if (response.success) {
                const json = response.json;
                json.id = ${workspace.id}; // force the workspace ID to be set correctly

                if (json.ciphertext && json.encryptionStrategy) {
                    showPassphraseModalAndDecryptWorkspace(json, loadWorkspace);
                } else {
                    loadWorkspace(json);
                }
            }
        }
    );

    structurizr.saveWorkspace = function(refresh) {
        if (structurizr.autoSave === false) {
            progressMessage.show('<p>Saving workspace...</p>');
        }
        $('#exitAndUnlockWorkspaceButton').prop('disabled', 'disabled');

        const callback = function(response) {
            progressMessage.hide();
            $('#exitAndUnlockWorkspaceButton').prop('disabled', '');

            if (response.success === true) {
                if (refresh === true) {
                    const indexOfVersionParameter = window.location.href.indexOf('?version=');
                    if (indexOfVersionParameter > -1) {
                        window.location.href = window.location.href.substr(0, indexOfVersionParameter);
                    } else {
                        location.reload();
                    }
                }
            } else {
                $('#exitAndUnlockWorkspaceButton').prop('disabled', 'disabled');
            }
        };

        const workspace = structurizr.workspace.getJson();
        workspace.views = structurizr.workspace.views;

        if (structurizrEncryptionStrategy) {
            try {
                const encryptedWorkspace = structurizrEncryptionStrategy.encrypt(workspace);
                if (encryptedWorkspace) {
                    structurizrApiClient.putWorkspace(encryptedWorkspace, callback);
                }
            } catch (e) {
                console.error(e);
                alert("Workspace " + id + " could not be saved - " + e);
            }
        } else {
            structurizrApiClient.putWorkspace(workspace, callback);
        }
    };
</script>